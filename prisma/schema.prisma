// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id          Int       @id @default(autoincrement())
  externalId  Int       @default(1000)
  name        String
  description String
  image       String
  status      String
  publisher   String    @default("Mladé Léta")
  pages       Int
  year        Int
  quantity    Int       @default(1)
  categoryId  Int       @default(1)
  Category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  authorId    Int
  Author      Author    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Borrowed    Booking[]
  createdAt   DateTime  @default(now())
}

model Category {
  id          Int      @id @default(autoincrement())
  externalId  Int      @default(2000)
  name        String
  description String
  books       Book[]
  createdAt   DateTime @default(now())
}

model Student {
  id            Int      @id @default(autoincrement())
  name          String   @default("FOO")
  lastName      String   @default("FOO")
  username      String   @unique @default("FOO")
  email         String   @unique @default("foo@gmail.com")
  password      String
  picture       String?
  isLogged      Boolean  @default(false)
  role          String   @default("STUDENT")
  classRoom     String   @default("1.A")
  createdAt     DateTime @default(now())
  isDeactivated Boolean  @default(false)
}

model Teacher {
  id              Int      @id @default(autoincrement())
  name            String   @default("FOO")
  lastName        String   @default("FOO")
  username        String   @unique @default("FOO")
  email           String   @unique @default("foo@gmail.com")
  password        String
  role            String   @default("TEACHER")
  isLogged        Boolean  @default(false)
  hasPermToCreate Boolean  @default(true)
  hasPermToDelete Boolean  @default(true)
  hasPermToUpdate Boolean  @default(true)
  canSeeBooking   Boolean  @default(false)
  createdAt       DateTime @default(now())
  isDeactivated   Boolean  @default(false)
}

model Admin {
  id              Int      @id @default(autoincrement())
  name            String   @default("FOO")
  lastName        String   @default("FOO")
  username        String   @unique @default("FOO")
  email           String   @unique @default("foo@gmail.com")
  password        String
  hasPermToCreate Boolean  @default(true)
  isLogged        Boolean  @default(false)
  specialCode     Int      @default(1000)
  hasPermToDelete Boolean  @default(true)
  hasPermToUpdate Boolean  @default(true)
  canSeeBookings  Boolean  @default(true)
  role            String   @default("ADMIN")
  createdAt       DateTime @default(now())
}

model Booking {
  id        Int      @id @default(autoincrement())
  from      String
  to        String
  username  String   @default("Custom user")
  bookId    Int
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Author {
  id          Int      @id @default(autoincrement())
  externalId  Int      @default(2020202)
  name        String
  lastName    String
  birthYear   Int
  isAlive     Boolean  @default(false)
  country     String
  description String
  litPeriod   String
  books       Book[]
  image       String
  createdAt   DateTime @default(now())
}

model Notification {
  id       Int      @id @default(autoincrement())
  message  String
  createdAt DateTime @default(now())
}