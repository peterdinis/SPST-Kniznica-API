// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id          Int       @id @default(autoincrement())
  externalId  String?   @default(uuid())
  name        String
  description String
  image       String
  status      String
  publisher   String    @default("Mlade LÃ©ta")
  pages       Int
  year        Int
  quantity    Int       @default(1)
  categoryId  Int       @default(1)
  Category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  authorId    Int
  Author      Author    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Borrowed    Booking[]
}

model Category {
  id          Int     @id @default(autoincrement())
  externalId  String? @default(uuid())
  name        String
  description String
  Books       Book[]
}

model Student {
  id        Int      @id @default(autoincrement())
  name      String   @default("FOO")
  lastName  String   @default("FOO")
  username  String   @default("FOO")
  email     String
  password  String
  picture   String?
  role      String   @default("STUDENT")
  classRoom String   @default("1.A")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Teacher {
  id              Int      @id @default(autoincrement())
  name            String   @default("FOO")
  lastName        String   @default("FOO")
  username        String   @default("FOO")
  email           String
  password        String
  role            String   @default("TEACHER")
  hasPermToCreate Boolean  @default(true)
  hasPermToDelete Boolean  @default(true)
  hasPermToUpdate Boolean  @default(true)
  canSeeBooking   Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Admin {
  id              Int      @id @default(autoincrement())
  name            String   @default("FOO")
  lastName        String   @default("FOO")
  username        String   @default("FOO")
  email           String
  password        String
  hasPermToCreate Boolean  @default(true)
  hasPermToDelete Boolean  @default(true)
  hasPermToUpdate Boolean  @default(true)
  canSeeBookings  Boolean  @default(true)
  role            String   @default("ADMIN")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Booking {
  id         Int     @id @default(autoincrement())
  externalId String? @default(uuid())
  from       String
  to         String
  username   String  @default("FOO")
  bookId     Int
  Book       Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model Author {
  id          Int     @id @default(autoincrement())
  externalId  String? @default(uuid())
  name        String
  lastName    String
  picture     String?
  birthYear   Int
  deathYear   Int?
  country     String
  description String
  litPeriod   String
  books       Book[]
}

model Message {
  id          Int    @id @default(autoincrement())
  name        String
  description String
}

model Notification {
  id      Int     @id @default(autoincrement())
  text    String
  content String
  isRead  Boolean @default(false)
  username String
}
