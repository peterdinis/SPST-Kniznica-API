// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id            String         @id @unique @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String
  lastName      String
  email         String         @unique
  password      String
  refreshTokens RefreshToken[]
  borrowedBooks Booking[]
  avatars       UserAvatar[] 
  role          String         @default("STUDENT")
  classRoom     String?        @default("1.A")
}

model Book {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  image       String
  author      String
  status      String
  pages       Int
  year        Int
  quantity    Int       @default(1)
  isBorrowed  Booking[]
  categoryId  Int       @default(1)
  Category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Category {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  Books       Book[]
}

model Booking {
  id     Int    @id @default(autoincrement())
  from   String
  to     String
  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookId Int
  Book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  status String @default("POŽIČANA")
}

model UserAvatar {
  id     Int    @id @default(autoincrement())
  source String
  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
